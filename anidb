#!/usr/bin/env python

import pyanidb, pyanidb.hash, sys, re, shutil, traceback
try:
	import ConfigParser
except ImportError:
	import configparser as ConfigParser
import optparse, os, sys, getpass
from collections import deque

# Workaround for input/raw_input
if hasattr(__builtins__, 'raw_input'):
	input = raw_input

def printfl(s):
	print(s)
	sys.stdout.flush()

# Colors.

red    = lambda x: '\x1b[1;31m' + x + '\x1b[0m'
green  = lambda x: '\x1b[1;32m' + x + '\x1b[0m'
yellow = lambda x: '\x1b[1;33m' + x + '\x1b[0m'
blue   = lambda x: '\x1b[1;34m' + x + '\x1b[0m'

# Config.

config = {}
cp = ConfigParser.ConfigParser()
cp.read(os.path.expanduser('~/.pyanidb.conf'))
for option in cp.options('pyanidb'):
	config[option] = cp.get('pyanidb', option)

# Options.

op = optparse.OptionParser()

op.add_option('-u', '--username', help = 'AniDB username.',
	action = 'store', dest = 'username', default = config.get('username'))
op.add_option('-p', '--password', help = 'AniDB password.',
	action = 'store', dest = 'password', default = config.get('password'))

op.add_option('-r', '--recursive', help = 'Recurse into directories.',
	action = 'store_true', dest = 'recursive', default = False)
op.add_option('-s', '--suffix', help = 'File suffix for recursive matching.',
	action = 'append', dest = 'suffix', default = config.get('suffix', '').split())
op.add_option('-c', '--no-cache', help = 'Do not use cached values.',
	action = 'store_false', dest = 'cache', default = int(config.get('cache', '1')))

op.add_option('-m', '--multihash', help = 'Calculate additional checksums.',
	action = 'store_true', dest = 'multihash', default = False)
op.add_option('-i', '--identify', help = 'Identify files.',
	action = 'store_true', dest = 'identify', default = False)
op.add_option('-a', '--add', help = 'Add files to mylist.',
	action = 'store_true', dest = 'add', default = False)
op.add_option('-W', '--watched', help = 'Mark files watched.',
	action = 'store_true', dest = 'watched', default = None)
op.add_option('-U', '--unwatched', help = 'Mark files not watched.',
	action = 'store_false', dest = 'watched', default = None)

op.add_option('-n', '--rename', help = 'Rename files.',
	action = 'store_true', dest = 'rename', default = False)
op.add_option('-C', '--copy', help = 'Copy files.',
	action = 'store_true', dest = 'copy', default = False)
op.add_option('-f', '--format', help = 'Filename format.',
	action = 'store', dest = 'format', default = config.get('format'))

op.add_option('-d', '--mark-deleted', help = 'Mark files deleted in anidb',
	action = 'store_true', dest = 'mark_deleted', default = config.get('mark_deleted'))
op.add_option('-l', '--readlist', help = 'Instead hashing the argument files, take their contents as a list of hashes.',
	action = 'store_true', dest = 'hashlist', default = config.get('hashlist'))

op.add_option('-P', '--plain-output', help = 'Do not format output in color',
	action = 'store_false', dest = 'color_output', default = True)

op.add_option('--storage', help = 'Set storage type. Possible values:\n{0}'.format(', '.join(pyanidb.storages.keys())),
	action = 'store', dest = 'storage', default = None)
op.add_option('--state', help = 'Set state. Possible values:\n{0}'.format(', '.join(pyanidb.states.keys())),
	action = 'store', dest = 'state', default = None)

options, args = op.parse_args(sys.argv[1:])

if not options.color_output:
	red = green = yellow = blue = lambda x: x

# Defaults.

if options.cache:
	try:
		import xattr
	except ImportError:
		printfl(red('No xattr, caching disabled.'))
		options.cache = False
options.add = options.add or options.storage or options.state or options.watched
options.identify = options.identify or options.rename or options.copy
options.login = options.add or options.watched or options.identify or options.mark_deleted
if not options.suffix:
	options.suffix = ['avi', 'ogm', 'mkv']
if not options.format:
	options.format = r'_~/video/anime/$animeromaji/$animekanji_-_$epno$ver_[$group][$CRC].$suf'

if options.login:
	if not options.username:
		options.username = input('Username: ')
	if not options.password:
		options.password = getpass.getpass()

# Input files.

files = []
remaining = deque(args)
while remaining:
	name = remaining.popleft()
	if not os.access(name, os.R_OK):
		printfl('{0} {1}'.format(red('Invalid file:'), name))
	elif os.path.isfile(name):
		files.append(name)
	elif os.path.isdir(name):
		if not options.recursive:
			printfl('{0} {1}'.format(red('Is a directory:'), name))
		else:
			for sub in sorted(os.listdir(name)):
				if sub.startswith('.'):
					continue
				sub = os.path.join(name, sub)
				if os.path.isfile(sub) and any(sub.endswith('.' + suffix) for suffix in options.suffix):
					files.append(sub)
				elif os.path.isdir(sub):
					remaining.appendleft(sub)

if not files:
	printfl(blue('Nothing to do.'))
	sys.exit(0)

# Authorization.

if options.login:
	a = pyanidb.AniDB(options.username, options.password)
	try:
		a.auth()
		printfl('{0} {1}'.format(blue('Logged in as user:'), options.username))
	except pyanidb.AniDBUserError:
		printfl(red('Invalid username/password.'))
		sys.exit(1)
	except pyanidb.AniDBTimeout:
		printfl(red('Connection timed out.'))
		sys.exit(1)
	except pyanidb.AniDBError as e:
		printfl('{0} {1}'.format(red('Fatal error:'), e))
		sys.exit(1)

# Hashing.

hashed = unknown = 0

fhashes = []
if options.hashlist:
    fhashes = pyanidb.hash.loadlist(files)
else:
    fhashes = pyanidb.hash.hash_files(files, options.cache, (('ed2k', 'md5', 'sha1', 'crc32') if options.multihash else ('ed2k',)))

for file in fhashes:
	printfl('{0} ed2k://|file|{1}|{2}|{3}|{4}'.format(blue('Hashed:'),  file.name, file.size, file.ed2k, ' (cached)' if file.cached else ''))
	fid = (file.size, file.ed2k)
	hashed += 1
	
	try:
		
		# Multihash.
		if options.multihash:
			printfl('{0} {1}'.format(blue('MD5:'), file.md5))
			printfl('{0} {1}'.format(blue('SHA1:'), file.sha1))
			printfl('{0} {1}'.format(blue('CRC32:'), file.crc32))
		
		# Identify.
		
		if options.identify:
			info = a.get_file(fid, ('gtag', 'romaji', 'epno', 'state', 'kanji', 'epkanji', 'crc32', 'filetype'), True)
			fid = int(info['fid'])
			printfl('{0} [{1}] {2} - {3} - {4}'.format(green('Identified:'), info['gtag'], info['kanji'], info['epno'], info['epkanji']))
		
		# Adding.
		
		if options.add:
			a.add_file(fid, viewed = options.watched, retry = True, storage = options.storage, state = options.state)
			printfl(green('Added to mylist.'))
		
		elif options.mark_deleted:
			mld = a.get_mylist(fid, retry = True)
			if int(mld['state']) == int(pyanidb.states['hdd']):
				printfl('File {0} is marked on hdd will be {1} deleted.'.format(file.name, red('marked')))
				a.add_file(lid = mld['lid'], state='deleted', retry = True)
			else:
				printfl('File {0} has state {1} and will not be touched.'.format(file.name, green(mld['state'])))
		
		# Renaming.
		
		if options.rename or options.copy:
			s = options.format
			rename_data = {
				'group': info['gtag'],
				'animeromaji': info['romaji'],
				'animekanji': info['kanji'],
				'epkanji': info['epkanji'],
				'epno': info['epno'],
				'ver': {0: '', 4: 'v2', 8: 'v3', 16: 'v4', 32: 'v5'}[(int(info['state']) & 0x3c)],
				'crc': info['crc32'].lower(),
				'CRC': info['crc32'].upper(),
				'suf': info['filetype']}
			s = os.path.expanduser(s)
			for name, value in rename_data.items():
				value = value.replace('/', ' ')
				nvalue = re.compile('[^一-龠ぁ-ゔァ-ヴーa-zA-Z0-9ａ-ｚＡ-Ｚ０-９々〆〤]+').sub('_', value)
				s = s.replace(r'$' + name, value)
				s = s.replace(r'$_' + name, nvalue)
			s = re.compile('([_ ])[_ ]*').sub(lambda x: x.group(1), s)
			
			if os.path.abspath(file.name) == os.path.abspath(s):
				printfl('File {0} {1}.'.format(file.name, green('is already in place')))
			else:
				printfl('{0} {1}'.format(yellow('Renaming to:'), s))
				try:
					basepath = os.path.dirname(s)
					if not os.path.exists(basepath):
						os.makedirs(basepath) # this is racy
					if options.rename:
						shutil.move(file.name, s)
					elif options.copy:
						shutil.copy2(file.name, s)
					else:
						raise Exception()
				except:
					traceback.print_exc()
	
	except pyanidb.AniDBUnknownFile:
		printfl(red('Unknown file.'))
		unknown += 1
	
	except pyanidb.AniDBNotInMylist:
		printfl(red('File not in mylist.'))

# Finished.

printfl(blue('Hashed {0} files{1}.'.format(hashed, ', {0} unknown'.format(unknown) if unknown else '')))
